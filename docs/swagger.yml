openapi: 3.0.1
info:
  title: Book Lending API
  version: 1.0.0
  description: |
    A simple RESTful API that allows users to register, authenticate, browse books,
    borrow them, and return them.  The service is built with Go, Gin and MySQL
    following a clean architecture pattern.
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      summary: Health check
      tags: [system]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
  /api/v1/auth/register:
    post:
      summary: Register a new user
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request
  /api/v1/auth/login:
    post:
      summary: Authenticate a user
      tags: [auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
  /api/v1/books:
    get:
      summary: List books
      tags: [books]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBooks'
    post:
      summary: Create a new book
      tags: [books]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookRequest'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /api/v1/books/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      summary: Get a book by ID
      tags: [books]
      responses:
        '200':
          description: The requested book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    put:
      summary: Update a book
      tags: [books]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookRequest'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Book not found
    delete:
      summary: Delete a book
      tags: [books]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Book deleted
  /api/v1/lending/borrow:
    post:
      summary: Borrow a book
      tags: [lending]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowBookRequest'
      responses:
        '201':
          description: Lending record created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingRecord'
        '409':
          description: Conflict (already borrowed or limit exceeded)
  /api/v1/lending/return/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    put:
      summary: Return a book
      tags: [lending]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Book returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingRecord'
        '404':
          description: Record not found
  /api/v1/lending/history:
    get:
      summary: Get borrowing history
      tags: [lending]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: Borrowing history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLendingRecords'
  /api/v1/lending/active:
    get:
      summary: Get active borrowings
      tags: [lending]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active borrowing records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingRecord'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    CreateBookRequest:
      type: object
      properties:
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        quantity:
          type: integer
        category:
          type: string
      required: [title, author, isbn, quantity, category]
    UpdateBookRequest:
      type: object
      properties:
        title:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
        isbn:
          type: string
          nullable: true
        quantity:
          type: integer
          nullable: true
        category:
          type: string
          nullable: true
    BorrowBookRequest:
      type: object
      properties:
        book_id:
          type: integer
      required: [book_id]
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Book:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
        quantity:
          type: integer
        category:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    LendingRecord:
      type: object
      properties:
        id:
          type: integer
        book_id:
          type: integer
        user_id:
          type: integer
        borrow_date:
          type: string
          format: date-time
        return_date:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        book:
          $ref: '#/components/schemas/Book'
        user:
          $ref: '#/components/schemas/User'
    PaginatedBooks:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer
    PaginatedLendingRecords:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LendingRecord'
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer